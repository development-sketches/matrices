type: edu
custom_name: stage2
files:
- name: src/processor/Main.kt
  visible: true
  text: |
    package processor

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.SimpleTestCase;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;

    public class NumericMatrixProcessorTest extends StageTest {

        @Override
        public List<TestCase> generate() {
            return Arrays.asList(
                new SimpleTestCase(
                    "3 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "7 8 9\n" +
                        "3",
                    "3 6 9\n" +
                        "12 15 18\n" +
                        "21 24 27"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "2 3\n" +
                        "1 2 3\n" +
                        "4 5 6\n" +
                        "0",
                    "0 0 0\n" +
                        "0 0 0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "5 5\n" +
                        "1 4 6 7 8\n" +
                        "1 9 5 2 2\n" +
                        "1 4 3 5 7\n" +
                        "1 4 6 4 1\n" +
                        "1 4 5 7 1\n" +
                        "5",
                    "5 20 30 35 40\n" +
                        "5 45 25 10 10\n" +
                        "5 20 15 25 35\n" +
                        "5 20 30 20 5\n" +
                        "5 20 25 35 5"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "1\n" +
                        "1",
                    "1"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "1 1\n" +
                        "0\n" +
                        "1",
                    "0"
                ).setCheckFunc(this::checkSolved),

                new SimpleTestCase(
                    "3 2\n" +
                        "1 2\n" +
                        "8 1\n" +
                        "9 1\n" +
                        "10",
                    "10 20\n" +
                        "80 10\n" +
                        "90 10"
                ).setCheckFunc(this::checkSolved)
            );
        }

        private CheckResult checkSolved(String reply, String clue) {

            clue = clue.trim();
            reply = reply.trim();

            if (reply.equals(clue)) {
                return CheckResult.correct();
            }

            if (clue.equals("ERROR")) {
                return CheckResult.wrong("");
            }

            List<String> user = Arrays.asList(reply.trim().split("\n"));
            List<String> answ = Arrays.asList(clue.trim().split("\n"));

            if (user.size() != answ.size()) {
                return CheckResult.wrong("");
            }

            for (int i = 0; i < user.size(); i++) {
                String userLine = user.get(i).trim();
                String answLine = answ.get(i).trim();
                if (!userLine.equals(answLine)) {
                    return CheckResult.wrong("");
                }
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/processor/Matrix.kt
  visible: true
  text: |-
    package processor

    interface Matrix<T : Any> : TwoDArray<T> {

        operator fun plus(other: Matrix<T>): Matrix<T>

        operator fun times(multiplier: T): Matrix<T>

    }

    class IntMatrix(
            private val array: TwoDArray<Int>
    ) : TwoDArray<Int> by array, Matrix<Int> {

        override fun plus(other: Matrix<Int>): Matrix<Int> {
            require(size == other.size) {
                "Matrices must have an equal number of rows and columns."
            }
            val buffer = zip(other).map { (value1, value2) -> value1 + value2 }
            return IntMatrix(TwoDArrayImpl(size, buffer))
        }

        override fun times(multiplier: Int): Matrix<Int> = IntMatrix(TwoDArrayImpl(size, map { it * multiplier }))

    }

    fun intMatrix(rows: List<List<Int>>): IntMatrix = IntMatrix(twoDArray(rows))
  learner_created: true
- name: src/processor/TwoDArrayImpl.kt
  visible: true
  text: |
    package processor

    class TwoDArrayImpl<out T : Any>(
            override val size: Dimension,
            private val buffer: List<T>
    ) : Iterable<T> by buffer, TwoDArray<T> {

        init {
            require(size.columns * size.rows == buffer.size) {
                "Size mismatch: expected buffer size - ${size.columns * size.rows}; actual buffer size - ${buffer.size}"
            }
        }

        override fun get(row: Int, col: Int): T {
            val index = row * size.columns + col
            require(index in buffer.indices) {
                "Row must be within 0 till ${size.rows} and column within 0 until ${size.columns}"
            }
            return buffer[index]
        }

    }

    fun <T : Any> twoDArray(vararg rows: Array<T>): TwoDArray<T> {
        val numOfRows = rows.size
        if (numOfRows == 0) {
            return TwoDArrayImpl(Dimension(0, 0), listOf())
        }
        val numOfCols = rows[0].size
        for (i in 1..rows.lastIndex) {
            require(rows[i].size == numOfCols) {
                "Number of columns mismatch: row 0 has $numOfCols columns and row $i has ${rows[i].size} columns."
            }
        }
        val buffer = rows.flatMap { it.asIterable() }.toList()
        return TwoDArrayImpl(Dimension(numOfRows, numOfCols), buffer)
    }

    fun <T : Any> twoDArray(rows: List<List<T>>): TwoDArray<T> {
        val numOfRows = rows.size
        if (numOfRows == 0) {
            return TwoDArrayImpl(Dimension(0, 0), listOf())
        }
        val numOfCols = rows[0].size
        for (i in 1..rows.lastIndex) {
            require(rows[i].size == numOfCols) {
                "Number of columns mismatch: row 0 has $numOfCols columns and row $i has ${rows[i].size} columns."
            }
        }
        val buffer = rows.flatMap { it.asIterable() }.toList()
        return TwoDArrayImpl(Dimension(numOfRows, numOfCols), buffer)
    }
  learner_created: true
- name: src/processor/TwoDArray.kt
  visible: true
  text: |-
    package processor

    data class Dimension(val rows: Int, val columns: Int)

    interface TwoDArray<out T : Any> : Iterable<T> {

        val size: Dimension

        operator fun get(row: Int, col: Int): T

    }
  learner_created: true
- name: src/processor/Vector.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7787#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 08 Apr 2022 01:18:17 UTC
record: 2
